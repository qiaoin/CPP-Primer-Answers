#+TITLE: 第 1 章 开始
#+AUTHOR: qiaoin
#+EMAIL: qiao.liubing@gmail.com
#+OPTIONS: toc:3 num:nil
#+STARTUP: showall

#+BEGIN_QUOTE
练习 1.1：查阅你使用的编辑器的文档，确定它所用的文件命名约定。编译并运行第 2 页的 main 程序。
#+END_QUOTE

[[http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming/#id3][Google C++ 编程风格指南]] 对文件命名的要求为 C++ 文件要以 =.cc= 结尾，头文件以 =.h= 结尾。
#+BEGIN_SRC c++
  int main()
  {
      return 0;
  }
#+END_SRC
假设此源文件保存为 =hello.cc= ， =g++ -Wall hello.cc -o hello= 进行编译生成可执行文件， =./hello= 运行，在终端并看到任何输出，这也可以窥见 UNIX 的艺术，“没有消息就是好消息”。

#+BEGIN_QUOTE
练习 1.2：改写程序，让它返回 -1。返回值 -1 通常被当做程序错误的标识。重新编译并运行你的程序，观察你的系统如何处理 main 返回的错误标识。
#+END_QUOTE

#+BEGIN_SRC c++
  int main()
  {
      return -1;
  }
#+END_SRC
重新编译并运行， =echo $?= 打印出返回值为 =255= 。

#+BEGIN_QUOTE
练习 1.3：编写程序，在标准输出上打印 =Hello, World= 。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main()
  {
      std::cout << "Hello, World" << std::endl;
      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.4：我们的程序使用加法运算符 =+= 来将两个数相加。编写程序使用乘法运算符 =×= 来打印两个数的积。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main()
  {
      std::cout << "Enter two numbers:" << std::endl;
      int v1 = 0, v2 = 0;
      std::cin >> v1 >> v2;
      std::cout << "The product of " << v1 << " and " << v2
                << " is " << v1 * v2 << std::endl;
      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.5：我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算符对象的打印操作放在一条独立的语句中。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main()
  {
      std::cout << "Enter two numbers:" << std::endl;
      int v1 = 0, v2 = 0;
      std::cin >> v1 >> v2;
      std::cout << "The sum of ";
      std::cout << v1;
      std::cout << " and ";
      std::cout << v2;
      std::cout << " is ";
      std::cout << v1 + v2;
      std::cout << std::endl;
      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.6：解释下面程序片段是否合法。

  std::cout << "The sum of " << v1;

            << " and " << v2;

            << " is " << v1 + v2 << std::endl;

如果程序是合法的，它输出什么？如果不合法，原因何在？应该如何修正？
#+END_QUOTE

该程序片段不合法，因为 =;= 表示语句的结束，这样 =and= 的输出就没有左侧运算对象 =std::cout= ，同理，之后的其他对象的输出也是。修正，仅需要去掉 =v1= 和 =v2= 后面的两个 =;= 即可。 

#+BEGIN_QUOTE
练习 1.7：编译一个包含不正确嵌套注释的程序，观察编译器返回的错误信息。
#+END_QUOTE

#+BEGIN_SRC c++
  int main() {
      /*
       * hello, world /* this is a mistake */
       * another line
       */
      return 0;
  }
#+END_SRC
保存文件为 =main.cc= ，执行编译命令 =g++ -Wall main.cc -o main= 报错 =‘another' was not declared in this scope= 

#+BEGIN_QUOTE
练习 1.8：指出下列哪些输出语句是合法的（如果有的话）：

  std::cout << "/*";

  std::cout << "*/";

  std::cout << /* "*/" */;

  std::cout << /* "*/" /* "/*" */;

预测编译这些语句会产生什么样的结果，实际编译这些语句来验证你的答案（编写一个小程序，每次将上述一条语句作为其主体），改正每个编译错误。
#+END_QUOTE

第 1、2 条语句不会报错，第 3、4 句会报错

#+BEGIN_QUOTE
练习 1.9：编写程序，使用 =while= 循环将 50 到 100 的整数相加。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main() {
      int sum = 0, val = 50;

      while (val <= 100) {
          sum += val;
          ++val;
      }

      std::cout << "Sum of 50 to 100 inclusive is " << sum  << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.10：除了 =++= 运算符将运算对象的值增加 1 之外，还有一个递减运算符（ =--= ）实现将值减 1。编写程序，使用递减运算符在循环中按递减顺序打印出 10 到 0 之间的整数。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main() {
      int val = 10;

      while (val > 0) {
          std::cout << val << "\t";
          --val;
      }
      std::cout << val << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.11：编写程序，提示用户输入两个整数，打印出这两个整数所指定的范围内的所有整数。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main() {
      int begin, end;

      std::cin >> begin >> end;

      if (begin > end) {
          int temp = end;
          end = begin;
          begin = temp;
      }

      while (begin < end) {
          std::cout << begin << "\t";
          ++begin;
      }
      std::cout << begin << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.12：下面的 =for= 循环完成了什么功能？ =sum= 的终值是多少？
  
  int sum = 0;

  for (int i = -100; i <= 100; ++i)

      sum += i;
#+END_QUOTE

将 -100 到 100 的所有整数相加，结果为 0

#+BEGIN_QUOTE
练习 1.13：使用 =for= 循环重做 1.4.1 节中的所有练习。
#+END_QUOTE

#+BEGIN_SRC c++
  // 练习 1.9
  #include <iostream>

  int main() {
      int sum = 0;

      for (int val = 50; val <= 100; ++val) {
          sum += val;
      }
      std::cout << "Sum of 50 to 100 inclusive is " << sum << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  // 练习 1.10
  #include <iostream>

  int main() {
      int val;

      for (val = 10; val > 0; --val) {
          std::cout << val << "\t";
      }
      std::cout << val << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  // 练习 1.11
  #include <iostream>

  int main() {
      int begin, end;

      std::cin >> begin >> end;

      if (begin > end) {
          int temp = end;
          end = begin;
          begin = temp;
      }

      for (;begin < end; ++begin) {
          std::cout << begin << "\t";
      }
      std::cout << begin << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.14：对比 =for= 循环和 =while= 循环，两种形式的优缺点各是什么？
#+END_QUOTE

*TODO*

#+BEGIN_QUOTE
练习 1.15：编写程序，包含第 14 页中“再探编译”中讨论的常见错误。熟悉编译器生成的错误信息。
#+END_QUOTE

*TODO*

#+BEGIN_QUOTE
练习 1.16：编写程序，从 =cin= 读取一组数，输出其和。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main() {
      int val, sum = 0;

      while (std::cin >> val) {
          sum += val;
      }
      std::cout << "Sum is " << sum << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.17：如果输入的所有值都是相等的，本节的程序会输出什么？如果没有重复值，输出又会是怎样的？
#+END_QUOTE

如果输入所有值全部相等，则输出一行“xx occurs x times”；若没有重复值，则每一个值输出一行“xx occurs 1 times”

#+BEGIN_QUOTE
练习 1.18：编译并运行本节的程序，给它输入全部相等的值。再次运行程序，输入没有重复的值。
#+END_QUOTE

#+BEGIN_QUOTE
练习 1.19：修改你为 1.4.1 节练习 1.10 所编写的程序（打印一个范围内的数），使其能处理用户输入的第一个数比第二个数小的情况。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>

  int main() {

      int begin, end;

      std::cin >> begin >> end;

      if (begin < end) {
          int temp = begin;
          begin = end;
          end = temp;
      }

      while (begin != end) {
          std::cout << begin << "\t";
          begin--;
      }
      std::cout << begin << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.20：头文件 [[./Sales_item.h][Sales_item]] 位于当前目录下，用它编写一个程序，读取一组书籍销售记录，将每条记录打印到标准输出上。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>
  #include "Sales_item.h"

  int main() {
      Sales_item book;

      while (std::cin >> book) {
          std::cout << book << std::endl;
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.21：编写程序，读取两个 =ISBN= 相同的 =Sales_item= 对象，输出它们的和。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>
  #include "Sales_item.h"

  int main() {
      Sales_item item1, item2;

      std::cin >> item1 >> item2;
      std::cout << item1 + item2 << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.22：编写程序，读取多个具有相同 =ISBN= 的销售记录，输出所有记录的和。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>
  #include "Sales_item.h"

  int main() {
      Sales_item sum, item;

      std::cin >> sum;
      while (std::cin >> item) {
          sum += item;
      }

      std::cout << sum << std::endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.23：编写程序，读取多条销售记录，并统计每个 =ISBN= （每本书）有几条销售记录。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <iostream>
  #include "Sales_item.h"

  int main() {
      Sales_item current_item;

      if (std::cin >> current_item) {
          Sales_item item;
          int cnt = 1;
          while (std::cin >> item) {
              if (current_item.isbn() == item.isbn()) {
                  ++cnt;
              } else {
                  std::cout << "ISBN = " << current_item.isbn()
                            << " sales " << cnt << std::endl;
                  current_item = item;
                  cnt = 1;
              }
          }
          std::cout << "ISBN = " << current_item.isbn() << " sales " << cnt << std::endl;
      } else {
          std::cerr << "No data?!" << std::endl;
          return -1;
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.24：输入表示多个 =ISBN= 的多条销售记录来测试上一个程序，每个 =ISBN= 的记录应该聚在一起。
#+END_QUOTE

编译 ~g++ -Wall -std=c++11 main.cc -o main~ ，执行 =./main < book_sales= 

#+BEGIN_QUOTE
练习 1.25：借助 [[./Sales_item.h][Sales_item.h]] 头文件，编译并运行本节给出的书店程序。
#+END_QUOTE
