#+TITLE: 第 2 章 变量和基本类型
#+AUTHOR: qiaoin
#+EMAIL: qiao.liubing@gmail.com
#+OPTIONS: toc:3 num:nil
#+STARTUP: showall

#+BEGIN_QUOTE
*注：* 将 3.5 数组 & 3.6 多维数组跳过，现阶段没有这方面的需求，之后如果需要再回来看。 [2018-05-06 16:25:49]
#+END_QUOTE

#+BEGIN_QUOTE
练习 3.1：使用恰当的 =using= 声明重做练习。
#+END_QUOTE

#+BEGIN_QUOTE
练习 3.2：编写一段程序从标准输入中一次读入一整行，然后修改该程序使其一次读入一个词。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string line;
      while (getline(cin, line)) {
          cout << line << endl;
      }
      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  #include <iostream>
  #include <string>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string word;
      while (cin >> word) {
          cout << word << endl;
      }
      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.3：请说明 =string= 类的输入运算符和 =getline= 函数分别是如何处理空白字符的。
#+END_QUOTE

- =string= 类的输入运算符 =>>= ，在执行读取操作时， =string= 对象会自动忽略开头的空白（即空格符、换行符、制表符等）并从第一个真正的字符开始读起，知道遇见下一处空白为止；
- =getline= 函数从给定的输入流中读入内容，直到遇到换行符为止（换行符也被读进来了），然后把所读到的内容存入到那个 =string= 对象中去（注意不存换行符）。

#+BEGIN_QUOTE
练习 3.4：编写一段程序读入两个字符串，比较其是否相等并输出结果。如果不相等，输出较大的那个字符串。改写上述程序，比较输入的两个字符串是否等长，如果不等长，输出长度较大的那个字符串。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str1, str2;
      getline(cin, str1);
      getline(cin, str2);

      if (str1 == str2) {
          cout << "两字符串相等" << endl;
      } else {
          if (str1 > str2) {
              cout << str1 << endl;
          } else {
              cout << str2 << endl;
          }
      }

      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str1, str2;
      getline(cin, str1);
      getline(cin, str2);

      if (str1.size() == str2.size()) {
          cout << "两字符串等长" << endl;
      } else {
          if (str1.size() > str2.size()) {
              cout << str1 << endl;
          } else {
              cout << str2 << endl;
          }
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.5：编写一段程序从标准输入中读入多个字符串并将它们连接在一起，输出连接成的大字符串。然后修改程序，用空格把输入的多个字符串分隔开来。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string result;
      string s;
      while (cin >> s) {
          result += s;
      }
      cout << result << endl;
      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string result;
      string s;
      if (cin >> s) {
          result += s;
      }
      while (cin >> s) {
          result += " ";
          result += s;
      }
      cout << result << endl;
      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.6：编写一段程序，使用范围 =for= 语句将字符串内的所有字符用 =X= 代替。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str = "0123456789";
      for (auto &c : str) {
          c = 'X';
      }
      cout << str << endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.7：就上一题完成的程序而言，如果循环控制变量的类型设为 =char= 将发生什么？先估计一下结果，然后实际编程进行验证。
#+END_QUOTE

声明为 =char= 类型，即在 =for= 循环的每次都声明一个局部变量 =c= ， =c= 得到 =string= 的每一个字符，然后改变此局部变量 =c= 的值为 =X= ，当循环结束时，并不会改变 =string= 的值。

#+BEGIN_QUOTE
练习 3.8：分别用 =while= 循环和传统的 =for= 循环重写第一题的程序，你觉得哪种形式更好呢？为什么？
#+END_QUOTE

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str = "0123456789";

      decltype(str.size()) index = 0;
      while (index != str.size()) {
          str[index] = 'X';
          index++;
      }
      cout << str << endl;

      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  #include <string>
  #include <iostream>

  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str = "0123456789";

      for (decltype(str.size()) index = 0;
           index != str.size(); ++index) {
          str[index] = 'X';
      }
      cout << str << endl;

      return 0;
  }
#+END_SRC

使用范围 =for= 更好，不用自己控制和判断索引是否合法，代码也更清晰。

#+BEGIN_QUOTE
练习 3.9：下面的程序有何作用？它合法吗？如果不合法，为什么？
#+END_QUOTE

#+BEGIN_SRC c++
string s;
cout << s[0] << endl;
#+END_SRC

不合法， =s= 为一空字符串， =s[0]= 期望访问字符串的第一个字符，未检查下标的合法性。

#+BEGIN_SRC c++
string s;
if (!s.empty()) {
    cout << s[0] << endl;
}
#+END_SRC

#+BEGIN_QUOTE
练习 3.10：编写一段程序，读入一个包含标点符号的字符串，将标点符号去除后输出字符串的剩余部分。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <cctype>
  #include <string>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;

  int main() {
      string str;

      getline(cin, str);
      for (auto c : str) {
          if (!ispunct(c)) {
              cout << c;
          }
      }
      cout << endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.11：下面的范围 =for= 语句合法吗？如果合法， =c= 的类型是什么？
#+END_QUOTE

#+BEGIN_SRC c++
const string s = "Keep out!";
for (auto &c : s) { /* ... */ }
#+END_SRC

合法， =c= 类型为 =const char &=

#+BEGIN_QUOTE
练习 3.12：下列 =vector= 对象的定义有不正确的吗？如果有，请指出来。对于正确的，描述其执行结果；对于不正确的，说明其错误的原因。
- ~vector<vector<int> > ivec;~
- ~vector<string> svec = ivec;~
- ~vector<string> svec(10, "null");~
#+END_QUOTE

- 正确， =ivec= 是一个空的 =vector<vector<int> >= ，其中的元素 =vector<int>= 也是执行默认初始化，为 0
- 错误， =svec= 的元素是 =string= 对象，不是 =vector<int>=
- 正确， =svec= 表示 10 个 =string= 类型的元素，每个都被初始化为 ="null"=

#+BEGIN_QUOTE
练习 3.13：下列的 =vector= 对象各包含多少个元素？这些元素的值分别是多少？
#+END_QUOTE

- =vector<int> v1;= 初始状态为空
- =vector<int> v2(10);= 10 个元素，每个都初始化为 0
- =vector<int> v2(10, 42);= 10 个元素，每个都初始化为 42
- =vector<int> v4{10};= 1 个元素，该元素的值为 10
- =vector<int> v5{10, 42};= 2 个元素，值分别是 10 和 42
- =vector<string> v6{10};= 10 个元素，每个都默认初始化为空
- =vector<string> v7{10, "hi"};= 10 个元素，值均为 ="hi"=

#+BEGIN_QUOTE
练习 3.14：编写一段程序，用 =cin= 读入一组整数并把它们存入一个 =vector= 对象。  
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>

  using std::cin;
  using std::vector;

  int main() {
      vector<int> ivec;

      int i;
      while (cin >> i) {
          ivec.push_back(i);
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.15：改写上题的程序，不过这次读入的是字符串。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>
  #include <string>

  using std::cin;
  using std::string;
  using std::vector;

  int main() {
      vector<string> svec;

      string s;
      while (cin >> s) {
          svec.push_back(s);
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.16：编写一段程序，把练习 3.13 中 =vector= 对象的容量和具体内容输出出来。检查你之前回答是否正确，如果不对，回过头重新学习 3.3.1 节直到弄明白错在何处为止。
#+END_QUOTE

*TODO* write a general function

#+BEGIN_QUOTE
练习 3.17：从 =cin= 读入一组词并把它们存入一个 =vector= 对象，然后设法把所有词都改写为大写形式。输出改变后的结果，每个词占一行。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>
  #include <string>
  #include <cctype>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;
  using std::vector;

  void to_uppecase(string& s) {
      for(auto &c : s) {
          c = toupper(c);
      }
  }

  int main() {
      vector<string> svec;

      string s;
      while (cin >> s) {
          svec.push_back(s);
      }

      for (vector<string>::iterator iter = svec.begin();
           iter != svec.end(); ++iter) {
          to_uppecase(*iter);
          cout << *iter << endl;
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.18：下面的程序合法吗？如果不合法，你准备如何修改？
#+END_QUOTE

#+BEGIN_SRC c++
vector<int> ivec;
ivec[0] = 42;
#+END_SRC

程序不合法，初始化 =ivec= 为空，不包含任何的元素，当然也就不能通过下标去访问任何元素了。可以修改为：

#+BEGIN_SRC c++
vector<int> ivec{42};
#+END_SRC

#+BEGIN_QUOTE
练习 3.19：如果想定义一个含有 10 个元素的 =vector= 对象，所有元素的值都是 42，请列举三种不同的实现方法。哪种方法更好？为什么？
#+END_QUOTE

- ~vector<int> ivec{42, 42, 42, 42, 42, 42, 42, 42, 42, 42};~
- ~vector<int> ivec(10, 42);~ 这种方法更好，简洁
-
#+BEGIN_SRC c++
  vector<int> ivec;
  for (int i = 0; i != 10; i++) {
      ivec.push_back(42);
  }
#+END_SRC

#+BEGIN_QUOTE
练习 1.20：读入一组整数并把它们存入一个 =vector= 对象，将每对相邻整数的和输出出来。改写你的程序，这次要求先输出第 1 个和最后 1 个元素的和，接着输出第 2 个和倒数第 2 个元素的和，以此类推。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::vector;

  int main() {
      vector<int> ivec;

      int i;
      while (cin >> i) {
          ivec.push_back(i);
      }

      for (vector<int>::size_type index = 0; index < ivec.size(); index += 2) {
          if (index + 1 < ivec.size()) {
              cout << ivec[index] + ivec[index+1] << endl;
          } else {
              cout << ivec[index] << endl;
          }
      }

      return 0;
  }
#+END_SRC

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::vector;

  int main() {
      vector<int> ivec;

      int i;
      while (cin >> i) {
          ivec.push_back(i);
      }

      vector<int>::size_type mid = ivec.size() / 2;
      for (vector<int>::size_type index = 0; index != mid; index++) {
          cout << ivec[index] + ivec[ivec.size() - 1 - index] << endl;
      }

      if (ivec.size() % 2) {
          cout << ivec[mid] << endl;
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.21：请用迭代器重做 3.3.3 节的第一个练习。
#+END_QUOTE

*TODO*

#+BEGIN_QUOTE
练习 3.22：修改之前那个输出 =text= 第一段的程序，首先把 =text= 的第一段全都改成大写形式，然后再输出它。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>
  #include <string>
  #include <cctype>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::string;
  using std::vector;

  int main() {
      vector<string> text = {"this", "is", "a", "paragraph", "", "this",
                             "is", "another", "paragraph", "."};

      for (auto it = text.begin();
           it != text.end() && !it->empty(); ++it) {
          for (auto &c : *it) {
              c = toupper(c);
          }
          cout << *it << endl;
      }

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.23：编写一段程序，创建一个含有 10 个整数的 =vector= 对象，然后使用迭代器将所有元素的值都变成原来的两倍。输出 =vector= 对象的内容，检验程序的正确性。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::vector;

  int main() {
      vector<int> ivec;
      for (int i = 0; i != 10; ++i) {
          ivec.push_back(i);
      }

      cout << "Before, vector is : ";
      for (auto i : ivec) {
          cout << i << " ";
      }
      cout << endl;

      for (auto it = ivec.begin(); it != ivec.end(); ++it) {
          ,*it = *it * 2;
      }
      cout << "After, vector is : ";
      for (auto i : ivec) {
          cout << i << " ";
      }
      cout << endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.24：请使用迭代器重做 3.3.3 节的最后一个练习。
#+END_QUOTE

*TODO*

#+BEGIN_QUOTE
练习 3.25：3.3.3 节划分分数段的程序是使用下标运算符实现的，请使用迭代器改写该程序并实现完全相同的功能。
#+END_QUOTE

#+BEGIN_SRC c++
  #include <vector>
  #include <iostream>

  using std::cin;
  using std::cout;
  using std::endl;
  using std::vector;

  int main() {
      vector<unsigned> scores(11, 0);
      unsigned grade;
      auto begin = scores.begin();
      while (cin >> grade) {
          if (grade <= 100) {
              (*(begin + grade / 10))++;
          }
      }

      for (auto s : scores) {
          cout << s << " ";
      }
      cout << endl;

      return 0;
  }
#+END_SRC

#+BEGIN_QUOTE
练习 3.26：在 100 页的二分搜索程序中，为什么用的是 ~mid = beg + (end - beg) / 2;~ ，而非 ~mid = (beg + end) / 2;~ ？
#+END_QUOTE

=beg= 和 =end= 均为迭代器，未定义迭代器的相加操作，而迭代器相减是有定义的， =end - beg= 即得到了 =vector= 中元素的数目。另外，若 =beg= 和 =end= 均为索引，相加之后可能会溢出，这也是一个考虑。


